{"type":"cy:bean","properties":{"beanType@STRING":"cy:requiremodule","name@STRING":"Collection","dependencies@STRING":["/libs/bndly/data/scripts/cy/Observable"],"script@STRING":"var Collection = Observable.extend({\r\n\tconstruct: function(config) {\r\n\t\tthis.callSuper(arguments, config);\r\n\t\tthis._rawItems = [];\r\n\r\n\t\tif (config) {\r\n\t\t\tif (Array.isArray(config)) {\r\n\t\t\t\tconfig = {\r\n\t\t\t\t\titems: config\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif (Array.isArray(config.items)) {\r\n\t\t\t\tthis._rawItems = config.items;\r\n\t\t\t} else if (config.items) {\r\n\t\t\t\tif (typeof (config.items.each) === \"function\") {\r\n\t\t\t\t\tconfig.items.each(function(item, index) {\r\n\t\t\t\t\t\tthis._rawItems.push(item);\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (config instanceof Collection) {\r\n\t\t\t\t\tconfig.each(function(item, index) {\r\n\t\t\t\t\t\tthis.add(item);\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tadd: function(item) {\r\n\t\tthis.insert(item, this.size());\r\n\t},\r\n\taddAll: function(collection) {\r\n\t\tcollection.each(function(toAdd) {\r\n\t\t\tthis.add(toAdd);\r\n\t\t}, this);\r\n\t},\r\n\tremove: function(item) {\r\n\t\tvar i = this.indexOf(item);\r\n\t\treturn this.removeAtIndex(i);\r\n\t},\r\n\tremoveAtIndex: function(i) {\r\n\t\tvar removedItem = undefined;\r\n\t\tif (i > -1) {\r\n\t\t\tremovedItem = this._rawItems.splice(i, 1)[0];\r\n\t\t\tthis.fireEvent(\"removed\", removedItem, i);\r\n\t\t}\r\n\t\treturn removedItem;\r\n\t},\r\n\treplace: function(toRemove, toInsert) {\r\n\t\tvar i = this.indexOf(toRemove);\r\n\t\tif (i > -1) {\r\n\t\t\tthis.removeAtIndex(i);\r\n\t\t\tthis.insert(toInsert, i);\r\n\t\t\tthis.fireEvent(\"replaced\", toRemove, toInsert);\r\n\t\t}\r\n\t},\r\n\tinsert: function(item, index) {\r\n\t\tif (!this._rawItems[index]) {\r\n\t\t\tthis._rawItems[index] = item;\r\n\t\t} else {\r\n\t\t\tvar rightPart = this._rawItems.splice(index);\r\n\t\t\tthis._rawItems.push(item);\r\n\t\t\tthis._rawItems = this._rawItems.concat(rightPart);\r\n\t\t}\r\n\t\tthis.fireEvent(\"inserted\", item, index);\r\n\t},\r\n\tsize: function() {\r\n\t\treturn this._rawItems.length;\r\n\t},\r\n\tisEmpty: function() {\r\n\t\treturn !(this.size() > 0);\r\n\t},\r\n\teach: function(handler, scope) {\r\n\t\tscope = !scope ? this : scope;\r\n\t\tfor (var i in this._rawItems) {\r\n\t\t\thandler.call(scope, this._rawItems[i], i);\r\n\t\t}\r\n\t},\r\n\tindexOf: function(item) {\r\n\t\tfor (var i in this._rawItems) {\r\n\t\t\tif (this._rawItems[i] === item) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t},\r\n\tgetItemAt: function(index) {\r\n\t\treturn this._rawItems[index];\r\n\t},\r\n\tclear: function() {\r\n\t\twhile (this.size() > 0) {\r\n\t\t\tthis.removeAtIndex(this.size() - 1);\r\n\t\t}\r\n\t},\r\n\tsort: function(comparator) {\r\n\t\t// TODO: get a proper implementation\r\n\t\tthis._rawItems.sort();\r\n\t}\r\n\r\n});\r\nreturn Collection;","initMethod@STRING":"","proxy@STRING":""}}
