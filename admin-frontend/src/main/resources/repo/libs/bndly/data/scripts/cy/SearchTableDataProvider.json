{"type":"cy:bean","properties":{"beanType@STRING":"cy:requiremodule","name@STRING":"SearchTableDataProvider","dependencies@STRING":["/libs/bndly/data/scripts/cy/EntityTableDataProvider","/libs/bndly/data/scripts/cy/RestBeans","/libs/bndly/data/scripts/cy/SearchConfiguration"],"script@STRING":"var SearchTableDataProvider = EntityTableDataProvider.extend({\r\n\tconstruct: function(config) {\r\n\t\tif(!config) {\r\n\t\t\tconfig = {};\r\n\t\t}\r\n\t\tif(!config.searchTerm) {\r\n\t\t\tconfig.searchTerm = \"\";\r\n\t\t}\r\n\t\tconfig.searchConfig = SearchConfiguration(config.entityType);\r\n\t\tconfig.sortField = config.searchConfig.sortBy;\r\n\t\tthis.callSuper(arguments, config);\r\n\t},\r\n\tsetSearchTerm: function(searchTerm) {\r\n\t\tthis.searchTerm = searchTerm;\r\n\t},\r\n\tloadedSearchResult: function(searchResult) {\r\n\t\tthis.page = searchResult;\r\n\t\tthis.fireEvent(\"load\", searchResult.getItems());\t\t\t\r\n\t},\r\n\tfoundSearchResult: function(searchResultLocation) {\r\n\t\tif (typeof(searchResultLocation) === \"object\") {\r\n\t\t\tthis.loadedSearchResult(searchResultLocation);\r\n\t\t} else {\r\n\t\t\tthis.page = new RestBeans[this.searchConfig.listType]();\r\n\t\t\tthis.page.follow({\r\n\t\t\t\t\turl: searchResultLocation,\r\n\t\t\t\t\tcb: this.loadedSearchResult,\r\n\t\t\t\t\tscope: this\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\tloadedSearchParameters: function (searchRestBean) {\r\n\t\tsearchRestBean.getQueryParams().each(function(keyValue) {\r\n\t\t\tif(keyValue.getKey() === \"searchTerm\") {\r\n\t\t\t\tkeyValue.setValue(this.searchTerm);\r\n\t\t\t} else if(keyValue.getKey() === \"pageStart\") {\r\n\t\t\t\tkeyValue.setValue(this.pageOffset);\r\n\t\t\t} else if(keyValue.getKey() === \"pageSize\") {\r\n\t\t\t\tkeyValue.setValue(this.pageSize);\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tsearchRestBean.follow({\r\n\t\t\trel: \"query\",\r\n\t\t\tcb: this.foundSearchResult,\r\n\t\t\tscope: this,\r\n\t\t\tpayload: searchRestBean\r\n\t\t});\r\n\t},\r\n\tloadedSearches: function(searchInfo) {\r\n\t\tsearchInfo.follow({\r\n\t\t\trel: this.searchConfig.link,\r\n\t\t\tcb: this.loadedSearchParameters,\r\n\t\t\tscope: this\r\n\t\t});\r\n\t},\r\n\tloadPage: function() {\r\n\t\tvar that = this;\r\n\t\tif(!this.queryLink) {\r\n\t\t\tif(!this.searchConfig) {\r\n\t\t\t\tconsole.error(\"missing a search config for \"+this.entityType);\r\n\t\t\t}\r\n\t\t\tRestBeans[this.entityType].prototype.primaryResource({}, \"init search data provider\").then(function(page){\r\n\t\t\t\tthat.loadedFirstPage(page);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.submitQuery();\r\n\t\t}\r\n\t},\r\n\tloadedFirstPage: function(page) {\r\n\t\tthis.queryLink = page.hasLink(\"search\");\r\n\t\tthis.submitQuery();\r\n\t},\r\n\tsubmitQuery: function() {\r\n\t\tvar parameters = new RestBeans.SearchParameters();\r\n\t\tvar solrQueryString;\r\n\t\tvar fieldsToUse = null;\r\n\t\tif(this.searchConfig.defaultFields) {\r\n\t\t\tfor(var field in this.searchConfig.defaultFields) {\r\n\t\t\t\tfieldsToUse[field] = this.searchConfig.defaultFields[field];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(this.searchConfig.fields) {\r\n\t\t\tfor(var i in this.searchConfig.fields) {\r\n\t\t\t\tif(!fieldsToUse) {\r\n\t\t\t\t\tfieldsToUse = {};\r\n\t\t\t\t}\r\n\t\t\t\tif(!this.searchTerm || this.searchTerm === \"\") {\r\n\t\t\t\t\tfieldsToUse[this.searchConfig.fields[i]] = \"*\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfieldsToUse[this.searchConfig.fields[i]] = this.searchTerm;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\tif(fieldsToUse) {\r\n\t\t\tfor (var field in fieldsToUse) {\r\n\t\t\t\tif (!solrQueryString) {\r\n\t\t\t\t\tsolrQueryString = \"\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsolrQueryString += \" AND \";\r\n\t\t\t\t}\r\n\t\t\t\tsolrQueryString += field + \":\" + fieldsToUse[field];\r\n\t\t\t}\r\n\t\t\tparameters.setQuery(solrQueryString);\r\n\t\t} else {\r\n\t\t\tparameters.setSearchTerm(this.searchTerm);\r\n\t\t}\r\n\t\tparameters.setPage(new RestBeans.PaginationRestBean());\r\n\t\tparameters.getPage().setStart(this.pageOffset);\r\n\t\tparameters.getPage().setSize(this.pageSize);\r\n\t\tthis.applySorting(parameters);\r\n\t\t\r\n\t\tparameters.follow({\r\n\t\t\tlink: this.queryLink,\r\n\t\t\tcb: this.foundSearchResult,\r\n\t\t\tscope: this,\r\n\t\t\tpayload: parameters\r\n\t\t});\r\n\t}\r\n});\r\nreturn SearchTableDataProvider;","initMethod@STRING":"","proxy@STRING":"","moduleId@STRING":"","export@STRING":""}}
