{"type":"cy:bean","properties":{"beanType@STRING":"cy:requiremodule","name@STRING":"InverseCollectionInput","dependencies@STRING":["/libs/bndly/data/scripts/cy/EntityCollection","/libs/bndly/data/scripts/cy/RestBeans","/libs/bndly/data/scripts/cy/ui/input/InputTypeRegistry","/libs/bndly/data/scripts/cy/ui/input/CollectionInput"],"script@STRING":"var InverseCollectionInput = CollectionInput.extend({\r\n\tconstruct: function(config) {\r\n\t\tif (!config) {\r\n\t\t\tconfig = {};\r\n\t\t}\r\n\t\tif (!config.entryFactoryFn) {\r\n\t\t\tif (!config.childType) {\r\n\t\t\t\tthrow new Error(\"missing childType for generated entryFactoryFn\");\r\n\t\t\t}\r\n\t\t\tif (!config.childProperty) {\r\n\t\t\t\tthrow new Error(\"missing childType for generated entryFactoryFn\");\r\n\t\t\t}\r\n\t\t\tconfig.entryFactoryFn = function(entity) {\r\n\t\t\t\tvar t = new RestBeans[config.childType]();\r\n\t\t\t\tt.set(config.childProperty, entity);\r\n\t\t\t\treturn t;\r\n\t\t\t};\r\n\t\t}\r\n\t\tif (!config.value) {\r\n\t\t\tconfig.value = new EntityCollection();\r\n\t\t}\r\n\t\tthis.callSuper(arguments, config);\r\n\r\n\t\tthis.initCollection();\r\n\t},\r\n\tdestroy: function() {\r\n\t\targuments.callee.$parent.destroy.call(this);\r\n\t},\r\n\tinitCollection: function() {\r\n\t\tthis.getValue().clear();\r\n\r\n\t\t// make sure that there is consistency\r\n\t\tthis.getValue().addListener(\"inserted\", function(item) {\r\n\t\t\tif (this.childProperty) {\r\n\t\t\t\titem.set(this.childProperty, this.entity);\r\n\t\t\t}\r\n\t\t}, this);\r\n\r\n\t\t// load entries if the parent is already persisted\r\n\t\tif (this.entity.hasLink(\"self\")) {\r\n\t\t\tthis.loadChildren();\r\n\t\t}\r\n\r\n\t\tthis.entity.addListener(\"persisted\", function(persistedEntry) {\r\n\t\t\tvar \r\n\t\t\t\tpersistedEntityAsReference = persistedEntry.ref(),\r\n\t\t\t\tchildProperty = this.childProperty\r\n\t\t\t;\r\n\t\t\tthis.getValue().each(function(item) {\r\n\t\t\t\titem.set(this.childProperty, persistedEntityAsReference, true);\r\n\t\t\t\titem.persist().then(function(persistedEntry) {\r\n\t\t\t\t\titem.set(childProperty, persistedEntry, true);\r\n\t\t\t\t});\r\n\t\t\t}, this);\r\n\t\t}, this);\r\n\t},\r\n\tentryRemoved: function(entry) {\r\n\t\tthis.callSuper(arguments, entry);\r\n\t\tthis.entity.addSingleInvocationListener(\"persisted\", function(persistedEntry) {\r\n\t\t\tentry.remove();\r\n\t\t}, this);\r\n\t},\r\n\tloadChildren: function() {\r\n\t\tif (this.childType) {\r\n\t\t\tvar proto = new RestBeans[this.childType]();\r\n\t\t\tif (this.childProperty) {\r\n\t\t\t\tproto.set(this.childProperty, this.entity);\r\n\t\t\t}\r\n\t\t\tthis.getValue().setProto(proto).load();\r\n\t\t}\r\n\t}\r\n});\r\nInputTypeRegistry.register(\"InverseCollectionInput\", InverseCollectionInput);\r\nreturn InverseCollectionInput;","initMethod@STRING":"","proxy@STRING":"","moduleId@STRING":"","export@STRING":""}}
