{"type":"cy:bean","properties":{"beanType@STRING":"cy:requiremodule","name@STRING":"SelectInput","dependencies@STRING":["/libs/bndly/data/scripts/cy/ui/Text","/libs/bndly/data/scripts/cy/ui/input/InputTypeRegistry","/libs/bndly/data/scripts/cy/LabelFunctions","/libs/bndly/data/scripts/cy/Collection","/libs/bndly/data/scripts/cy/ui/input/InputViewComponent"],"script@STRING":"var SelectInput = InputViewComponent.extend({\r\n\tconstruct: function (config) {\r\n\t\tif (!config) {\r\n\t\t\tconfig = {};\r\n\t\t}\r\n\t\tif (!config.items) {\r\n\t\t\tconfig.items = new Collection();\r\n\t\t}\r\n\r\n\t\tif (!config.entryValueFn) {\r\n\t\t\tconfig.entryValueFn = this._defaultEntryValueFn;\r\n\t\t}\r\n\t\tif (!config.entryLabelFn) {\r\n\t\t\tconfig.entryLabelFn = this._defaultEntryLabelFn;\r\n\t\t}\r\n\t\tconfig.emptyEntry = {\r\n\t\t};\r\n\r\n\t\tconfig.entryObjectConfigs = {};\r\n\t\tthis.callSuper(arguments, config);\r\n\r\n\t\tthis.listen(config.items, \"inserted\", this.renderSelectItem, this);\r\n\t\tthis.listen(config.items, \"removed\", this.removeSelectItem, this);\r\n\t},\r\n\t_defaultEntryValueFn: function (entry) {\r\n\t\tfor (var i in entry) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t},\r\n\t_defaultEntryLabelFn: function (entry) {\r\n\t\tvar label = LabelFunctions(entry);\r\n\t\tif (label) {\r\n\t\t\treturn label;\r\n\t\t}\r\n\t\tfor (var i in entry) {\r\n\t\t\treturn entry[i];\r\n\t\t}\r\n\t\treturn undefined;\r\n\t},\r\n\tdestroy: function () {\r\n\t\targuments.callee.$parent.destroy.call(this);\r\n\t},\r\n\trenderTo: function (renderTarget) {\r\n\t\tthis.input = $(renderTarget).append(\"<select class=\\\"form-control\\\"></select>\").children().last();\r\n\t\tvar _this = this;\r\n\t\t$(this.input).change(function () {\r\n\t\t\tvar rawValue = $(_this.input).val();\r\n\t\t\t//console.log(\"setting raw value: \"+rawValue);\r\n\t\t\t_this._setValue(rawValue);\r\n\t\t\t_this.inputChanged();\r\n\t\t});\r\n\t\tif (this.name) {\r\n\t\t\t$(this.input).attr(\"name\", this.name);\r\n\t\t}\r\n\t\tif (this.id) {\r\n\t\t\t$(this.input).attr(\"id\", this.id);\r\n\t\t}\r\n\t\tif (this.allowEmpty) {\r\n\t\t\tthis.renderSelectItem(this.emptyEntry);\r\n\t\t}\r\n\t\tthis.items.each(function (entry) {\r\n\t\t\tthis.renderSelectItem(entry);\r\n\t\t}, this);\r\n\t},\r\n\trenderSelectItem: function (entry) {\r\n\t\tif (!this.allowEmpty && !this.getBoundValue()) {\r\n\t\t\tthis.setBoundValue(entry);\r\n\t\t}\r\n\r\n\t\tvar entryValue, entryLabel;\r\n\t\tif (entry === this.emptyEntry) {\r\n\t\t\tentryValue = null;\r\n\t\t\tentryLabel = \"\";\r\n\t\t} else {\r\n\t\t\tentryValue = this.entryValueFn(entry);\r\n\t\t\tentryLabel = this.entryLabelFn(entry);\r\n\t\t}\r\n\t\tvar shouldPreselect = false;\r\n\t\tvar bound = this.getBoundValue();\r\n\t\tif (bound) {\r\n\t\t\tif (this.entryValueFn === this._defaultEntryValueFn) {\r\n\t\t\t\tshouldPreselect = bound === entryValue;\r\n\t\t\t} else {\r\n\t\t\t\tshouldPreselect = this.entryValueFn(bound) === entryValue;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar config = {};\r\n\t\tthis.entryObjectConfigs[entryValue] = config;\r\n\t\tconfig.entry = entry;\r\n\t\tconfig.option = new Text({value: entryLabel, tag: \"option\"});\r\n\t\tconfig.option.renderTo(this.input);\r\n\t\t$(config.option.element).attr(\"value\", entryValue);\r\n\t\tif (shouldPreselect) {\r\n\t\t\t$(this.input).children(\"option[selected]\").removeAttr(\"selected\");\r\n\t\t\t$(config.option.element).attr(\"selected\", \"\");\r\n\t\t}\r\n\t},\r\n\tremoveSelectItem: function (entry) {\r\n\t\tvar entryValue = this.entryValueFn(entry);\r\n\t\tvar config = this.entryObjectConfigs[entryValue];\r\n\t\tconfig.option.destroy();\r\n\t},\r\n\tgetValue: function () {\r\n\t\tif (!this.rawValue) {\r\n\t\t\tthis._setValue($(this.input).val());\r\n\t\t}\r\n\r\n\t\t// map raw value to actual value\r\n\t\tif (this.entryValueFn === this._defaultEntryValueFn) {\r\n\t\t\t// console.log(\"returning raw: \" + this.rawValue);\r\n\t\t\treturn this.rawValue;\r\n\t\t} else {\r\n\t\t\tvar entry = this.entryObjectConfigs[this.rawValue].entry;\r\n\t\t\tif (entry === this.emptyEntry) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\treturn entry;\r\n\t\t}\r\n\t},\r\n\tsetValue: function (value) {\r\n\t\tvar rawValue = value;\r\n\t\tif (this.entryValueFn !== this._defaultEntryValueFn) {\r\n\t\t\trawValue = this.entryValueFn(value);\r\n\t\t}\r\n\t\tthis._setValue(rawValue);\r\n\t},\r\n\t_setValue: function (rawValue) {\r\n\t\tthis.rawValue = rawValue;\r\n\t\tvar config = this.entryObjectConfigs[rawValue];\r\n\t\t$(this.input).val(rawValue);\r\n\t}\r\n});\r\nInputTypeRegistry.register(\"SelectInput\", SelectInput);\r\nreturn SelectInput;","initMethod@STRING":"","proxy@STRING":"","moduleId@STRING":"","export@STRING":""}}
